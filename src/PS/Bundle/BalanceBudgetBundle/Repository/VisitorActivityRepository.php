<?php

namespace PS\Bundle\BalanceBudgetBundle\Repository;

use Doctrine\ORM\EntityRepository;
use PS\Bundle\BalanceBudgetBundle\Entity\VisitorActivity;
/**
 * VisitorActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitorActivityRepository extends EntityRepository
{
    public function saveActivity($sessionId, $issueId, $value, $percentage=null){
        
        $visitorActivity  = $this->findOneBy(array('session_id'=>$sessionId, 'issue_id' => $issueId));
        // update the row
        if(isset($visitorActivity))
        {
          $visitorActivity->setIssueValue($value);  
          if(isset($percentage))
          $visitorActivity->setIssuePercentage($percentage);      
        }
        else // create the row
        {
           $visitorActivity = new VisitorActivity();
           $visitorActivity->setSessionId($sessionId);
           $visitorActivity->setIssueId($issueId);
           $visitorActivity->setIssueValue($value);
           $visitorActivity->setHasTouched(true);
           if(isset($percentage))
          $visitorActivity->setIssuePercentage($percentage);  
        }
        
        $em = $this->getEntityManager();
        $em->persist($visitorActivity);
        $em->flush();
        
    }
    

    public function getTheSetParentValues($session_id)
    {
        $totalDebt = 0;
       $parentIssues = $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Issue')->getParentIssues(); 
        foreach($parentIssues as $parent){
           $parentIssue = $this->findOneBy(array('issue_id' => $parent->getId(), 'session_id' => $session_id));
           if(isset($parentIssue))
           {
               $totalDebt += $parentIssue->getIssueValue();
           }
           
        }
        return $totalDebt;
    } 
    
    public function getCumulativeValue($session_id, $issueId, $depId)
    {
        $dep = $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Dependency')->find($depId);
        $depIssues = $dep->getDependantissues();
        $debMax = 0;
        foreach($depIssues as $issue){
            if($issue->getId() != $issueId)
            {
                $debIssue = $this->findOneBy(array('issue_id' => $issue->getId(), 'session_id' => $session_id));
                if($debIssue)
                $debMax += $debIssue->getIssueValue();
            }
            
        } 
        
       return $debMax; 
    }
    
    public function getSectionTotal($issueId, $sessionId, $reducerId){
          // echo $reducerId.'<br>';
                       
                       
       $parentIssue =  $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Issue')->findOneById($issueId)->getParent();
       $children = $parentIssue->getChildren();
       $sectionTotal = 0;
       foreach($children as $child){
             $childresult = $this->findOneBy(array('issue_id' => $child->getId(), 'session_id' => $sessionId)); 
             if(isset($childresult))
             {
                if($reducerId != $child->getId())
                {  $sectionTotal += $childresult->getIssueValue();
                
                }
                
                
             }
             
       }
       
       return $sectionTotal; 
    }
    
    
    
    public function getWOGsectionTotal($wogId, $sessionId){
        
       
      //get the WOG parent id from the wog issue
        $wogIssue = $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Issue')->findOneById($wogId);
        $wogParentId = $wogIssue->getParent()->getId();
        $issues = $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Issue')->findOneById($wogParentId)->getChildren();

      $wogTotal = 0;
      foreach($issues as $issue){
        $wog = $this->findOneBy(array('session_id' => $sessionId, 'issue_id' => $issue->getId()));  
        if(isset($wog))
        $wogTotal += $wog->getIssueValue();
        
      }
    
      return $wogTotal;
      
    }
    
    
    public function getSummaryInformation($sessionId){
        
       $results = array();
     
       $parentIssues = $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Issue')->getParentIssues(); 
      
       
       foreach($parentIssues as $k=>$parentIssue){
           $savedParent = $this->findOneBy(array('issue_id' => $parentIssue->getId(), 'session_id' => $sessionId));
           if(isset($savedParent))
           {
              $parentIssueCategoryId = $parentIssue->getSectionissue()->getCategory()->getId();
              $key =  $this->getEntityManager()->getRepository('PSBalanceBudgetBundle:Category')->find($parentIssueCategoryId)->getName();
              
             // echo 'cat:'.$key.' value:'.$savedParent->getIssueValue().'<br>';
              if(array_key_exists($key, $results))
              {
                  $value =  $results[$key]; 
                 $value += $savedParent->getIssueValue();
               $results[$key] = $value;
               // $results[$key] = (intval($value)/1000);
              }        
            else 
            {
                $results[$key] = $savedParent->getIssueValue();
               // $results[$key] = (intval($savedParent->getIssueValue())/1000);
            }
            
           }  
           
       }
       
      
       return $results; 
    }
    
}
